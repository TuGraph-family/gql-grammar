<literal> ::=<signed numeric literal> | <general literal>
<general literal> ::=<predefined type literal> | <list literal> | <record literal>
<predefined type literal> ::=<boolean literal> | <character string literal> | <byte string literal> | <temporal literal> | <duration literal> | <null literal>
<unsigned literal> ::=<unsigned numeric literal> | <general literal>
<boolean literal> ::=TRUE | FALSE | UNKNOWN
<character string literal> ::=<single quoted character sequence> | <double quoted character sequence>
<unbroken character string literal> ::=[ <no escape> ] <unbroken single quoted character sequence> | [ <no escape> ] <unbroken double quoted character sequence>
<single quoted character sequence> ::=[ <no escape> ] <unbroken single quoted character sequence> [ { <separator> <unbroken single quoted character sequence> }... ]
<double quoted character sequence> ::=[ <no escape> ] <unbroken double quoted character sequence> [ { <separator> <unbroken double quoted character sequence> }... ]
<accent quoted character sequence> ::=[ <no escape> ] <unbroken accent quoted character sequence> [ { <separator> <unbroken accent quoted character sequence> }... ]
<no escape> ::=<commercial at>
<unbroken single quoted character sequence> ::=<quote> [ <single quoted character representation> ... ] <quote>
<unbroken double quoted character sequence> ::=<double quote> [ <double quoted character representation>... ] <double quote>
<unbroken accent quoted character sequence> ::=<grave accent> [ <accent quoted character representation>... ] <grave accent>
<single quoted character representation> ::=<character representation>
<double quoted character representation> ::=<character representation>
<accent quoted character representation> ::=<character representation>
<character representation> ::=I_DONT_KNOW
<string literal character> ::=I_DONT_KNOW
<escaped character> ::=<escaped reverse solidus> | <escaped quote> | <escaped double quote> | <escaped grave accent> | <escaped tab> | <escaped backspace> | <escaped newline> | <escaped carriage return> | <escaped form feed> | <unicode escape value>
<escaped reverse solidus> ::=<reverse solidus> <reverse solidus>
<escaped quote> ::=<reverse solidus> <quote>
<escaped double quote> ::=<reverse solidus> <double quote>
<escaped grave accent> ::=<reverse solidus> <grave accent>
<escaped tab> ::=<reverse solidus> t
<escaped backspace> ::=<reverse solidus> b
<escaped newline> ::=<reverse solidus> n
<escaped carriage return> ::=<reverse solidus> r
<escaped form feed> ::=<reverse solidus> f
<unicode escape value> ::=<unicode 4 digit escape value> | <unicode 6 digit escape value>
<unicode 4 digit escape value> ::=<reverse solidus> u <hex digit> <hex digit> <hex digit> <hex digit>
<unicode 6 digit escape value> ::=<reverse solidus> U <hex digit> <hex digit> <hex digit> <hex digit> <hex digit> <hex digit>
<byte string literal> ::=X <quote> [ <space> ... ] [ { <hex digit> [ <space> ... ] <hex digit> [ <space>... ] }... ] <quote> [ { <separator> <quote> [ <space>... ] [ { <hex digit> [ <space> ... ] <hex digit> [ <space>... ] }... ] <quote> }... ]
<signed numeric literal> ::=[ <sign> ] <unsigned numeric literal>
<unsigned numeric literal> ::=<exact numeric literal> | <approximate numeric literal>
<exact numeric literal> ::=<unsigned integer> | <unsigned decimal in common notation> [ <exact number suffix> ] | <unsigned decimal in scientific notation> [ <exact number suffix> ] | <unsigned decimal integer> [ <exact number suffix> ]
<approximate numeric literal> ::=<unsigned decimal in common notation> <approximate number suffix> | <unsigned decimal in scientific notation> [ <approximate number suffix> ] | <unsigned decimal integer> <approximate number suffix>
<exact number suffix> ::=M
<approximate number suffix> ::=F | D
<sign> ::=<plus sign> | <minus sign>
<unsigned integer> ::=<unsigned decimal integer> | <unsigned hexadecimal integer> | <unsigned octal integer> | <unsigned binary integer>
<unsigned decimal in common notation> ::=<unsigned decimal integer> { [ <period> [ <unsigned decimal integer> ] ] } | <period> <unsigned decimal integer>
<unsigned decimal integer> ::=<digit> [ { [ <underscore> ] <digit> }... ]
<unsigned hexadecimal integer> ::=0x { [ <underscore> ] <hex digit> }...
<unsigned octal integer> ::=0o { [ <underscore> ] <octal digit> }...
<unsigned binary integer> ::=0b { [ <underscore> ] <binary digit> }...
<signed decimal integer> ::=[ <sign> ] <unsigned decimal integer>
<unsigned decimal in scientific notation> ::=<mantissa> E <exponent>
<mantissa> ::=<exact numeric literal>
<exponent> ::=<signed decimal integer>
<temporal literal> ::=<date literal> | <time literal> | <datetime literal> | <SQL-datetime literal>
<date literal> ::=DATE <date string>
<time literal> ::=TIME <time string>
<datetime literal> ::={ DATETIME | TIMESTAMP } <datetime string>
<date string> ::=<unbroken character string literal>
<time string> ::=<unbroken character string literal>
<datetime string> ::=<unbroken character string literal>
<SQL-datetime literal> ::=I_DONT_KNOW
<duration literal> ::=DURATION <duration string> | <SQL-interval literal>
<duration string> ::=<unbroken character string literal>
<SQL-interval literal> ::=I_DONT_KNOW
<null literal> ::=NULL
<list literal> ::=<list value constructor by enumeration>
<record literal> ::=<record value constructor>
<object name> ::=<identifier>
<object name or binding variable> ::=<regular identifier>
<directory name> ::=<identifier>
<schema name> ::=<identifier>
<graph name> ::=<regular identifier> | <delimited graph name>
<delimited graph name> ::=<delimited identifier>
<graph type name> ::=<identifier>
<element type name> ::=<identifier>
<binding table name> ::=<regular identifier> | <delimited binding table name>
<delimited binding table name> ::=<delimited identifier>
<procedure name> ::=<identifier>
<label name> ::=<identifier>
<property name> ::=<identifier>
<field name> ::=<identifier>
<parameter name> ::=<dollar sign> <separated identifier>
<variable> ::=<graph variable> | <graph pattern variable> | <binding table variable> | <value variable> | <binding variable>
<graph variable> ::=<binding variable>
<graph pattern variable> ::=<element variable> | <path or subpath variable>
<path or subpath variable> ::=<path variable> | <subpath variable>
<element variable> ::=<binding variable>
<path variable> ::=<binding variable>
<subpath variable> ::=<regular identifier>
<binding table variable> ::=<binding variable>
<value variable> ::=<binding variable>
<binding variable> ::=<regular identifier>
<token> ::=<non-delimiter token> | <delimiter token>
<non-delimiter token> ::=<regular identifier> | <parameter name> | <key word> | <unsigned numeric literal> | <byte string literal> | <multiset alternation operator>
<identifier> ::=<regular identifier> | <delimited identifier>
<separated identifier> ::=<extended identifier> | <delimited identifier>
<non-delimited identifier> ::=<regular identifier> | <extended identifier>
<regular identifier> ::=<identifier start> [ <identifier extend> ... ]
<extended identifier> ::=<identifier extend> ...
<delimited identifier> ::=<double quoted character sequence> | <accent quoted character sequence>
<identifier start> ::=I_DONT_KNOW
<identifier extend> ::=I_DONT_KNOW
<key word> ::=<reserved word> | <non-reserved word>
<reserved word> ::=I_DONT_KNOW
<pre-reserved word> ::=AGGREGATE | AGGREGATES | ALTER | CATALOG | CLEAR | CLONE | CONSTRAINT | CURRENT_ROLE | DATA | DIRECTORY | EXACT | EXISTING | FUNCTION | GQLSTATUS | GRANT | INSTANT | LEFT | NOTHING | NUMERIC | ON | PARTITION | PROCEDURE | PRODUCT | PROJECT | QUERY | RECORDS | REFERENCE | RENAME | REVOKE | RIGHT | SUBSTRING | TEMPORAL | UNIQUE | UNIT | VALUES
<non-reserved word> ::=ACYCLIC | BINDING | BINDINGS
<multiset alternation operator> ::=|+|
<delimiter token> ::=<GQL special character> | <bracket right arrow> | <bracket tilde right arrow> | <character string literal> | <concatenation operator> | <date string> | <datetime string> | <delimited identifier> | <double colon> | <double minus sign> | <double period> | <duration string> | <greater than operator> | <greater than or equals operator> | <left arrow> | <left arrow bracket> | <left arrow tilde> | <left arrow tilde bracket> | <left minus right> | <left minus slash> | <left tilde slash> | <less than operator> | <less than or equals operator> | <minus left bracket> | <minus slash> | <not equals operator> | <right arrow> | <right bracket minus> | <right bracket tilde> | <slash minus> | <slash minus right> | <slash tilde> | <slash tilde right> | <tilde left bracket> | <tilde right arrow> | <tilde slash> | <time string>
<bracket right arrow> ::=]->
<bracket tilde right arrow> ::=]~>
<concatenation operator> ::=||
<double colon> ::=::
<double minus sign> ::=--
<double period> ::=..
<greater than operator> ::=<right angle bracket>
<greater than or equals operator> ::=>=
<left arrow> ::=<-
<left arrow tilde> ::=<~
<left arrow bracket> ::=<-[
<left arrow tilde bracket> ::=<~[
<left minus right> ::=<->
<left minus slash> ::=<-/
<left tilde slash> ::=<~/
<less than operator> ::=<left angle bracket>
<less than or equals operator> ::=<=
<minus left bracket> ::=-[
<minus slash> ::=-/
<not equals operator> ::=<>
<right arrow> ::=->
<right bracket minus> ::=]-
<right bracket tilde> ::=]~
<slash minus> ::=/-
<slash minus right> ::=/->
<slash tilde> ::=/~
<slash tilde right> ::=/~>
<tilde left bracket> ::=~[
<tilde right arrow> ::=~>
<tilde slash> ::=~/
<double solidus> ::=//
<separator> ::={ <comment> | <whitespace> }...
<whitespace> ::=I_DONT_KNOW
<bidirectional control character> ::=I_DONT_KNOW
<comment> ::=<simple comment> | <bracketed comment>
<simple comment> ::=<simple comment introducer> [ <simple comment character>... ] <newline>
<simple comment introducer> ::=<double solidus> | <double minus sign>
<simple comment character> ::=I_DONT_KNOW
<bracketed comment> ::=<bracketed comment introducer> <bracketed comment contents> <bracketed comment terminator>
<bracketed comment introducer> ::=/*
<bracketed comment terminator> ::=*/
<bracketed comment contents> ::=I_DONT_KNOW
<newline> ::=I_DONT_KNOW
<edge synonym> ::=EDGE | RELATIONSHIP
<edges synonym> ::=EDGES | RELATIONSHIPS
<node synonym> ::=NODE | VERTEX
<GQL terminal character> ::=<GQL language character> | <other language character>
<GQL language character> ::=<simple Latin letter> | <digit> | <GQL special character>
<simple Latin letter> ::=<simple Latin lower-case letter> | <simple Latin upper-case letter>
<simple Latin lower-case letter> ::=a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
<simple Latin upper-case letter> ::=A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
<hex digit> ::=<standard digit> | A | B | C | D | E | F | a | b | c | d | e | f
<digit> ::=<standard digit> | <other digit>
<standard digit> ::=<octal digit> | 8 | 9
<octal digit> ::=<binary digit> | 2 | 3 | 4 | 5 | 6 | 7
<binary digit> ::=0 | 1
<other digit> ::=I_DONT_KNOW
<GQL special character> ::=<space> | <ampersand> | <asterisk> | <colon> | <equals operator> | <comma>
<space> ::=I_DONT_KNOW
<ampersand> ::=&
<asterisk> ::=*
<circumflex> ::=^
<colon> ::=:
<comma> ::=,
<commercial at> ::=@
<dollar sign> ::=$
<double quote> ::="
<equals operator> ::==
<exclamation mark> ::=!
<right angle bracket> ::=>
<grave accent> ::=`
<left brace> ::={
<left bracket> ::=[
<left paren> ::=(
<left angle bracket> ::=<
<minus sign> ::=-
<percent> ::=%
<period> ::=.
<plus sign> ::=+
<question mark> ::=?
<quote> ::='
<reverse solidus> ::=\
<right brace> ::=}
<right bracket> ::=]
<right paren> ::=)
<semicolon> ::=;
<solidus> ::=/
<tilde> ::=~
<underscore> ::=_
<vertical bar> ::=|
<other language character> ::=I_DONT_KNOW
